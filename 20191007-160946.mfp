-- MIDIFall Properties File

if mainComponent then mainComponent.lowestKey = 29 end
if mainComponent then mainComponent.highestKey = 95 end
if mainComponent then mainComponent.keyGap = 0.18 end
if mainComponent then mainComponent.keyboardPosition = 0.2 end
if mainComponent then mainComponent.keyboardLength = 0.06 end
if mainComponent then mainComponent.keyboardHeight = 1 end
if mainComponent then mainComponent:setOrientation(0) end
if mainComponent.backgroundComponent then mainComponent.backgroundComponent.enabled = true end
if mainComponent.backgroundComponent then if mainComponent.backgroundComponent.fits then mainComponent.backgroundComponent.fits[1] = true end
if mainComponent.backgroundComponent.fits then mainComponent.backgroundComponent.fits[2] = true end
 end
if mainComponent.backgroundComponent then if mainComponent.backgroundComponent.scales then mainComponent.backgroundComponent.scales[1] = 1 end
if mainComponent.backgroundComponent.scales then mainComponent.backgroundComponent.scales[2] = 1 end
 end
if mainComponent.backgroundComponent then if mainComponent.backgroundComponent.offsets then mainComponent.backgroundComponent.offsets[1] = 0 end
if mainComponent.backgroundComponent.offsets then mainComponent.backgroundComponent.offsets[2] = 0 end
 end
if mainComponent.backgroundComponent then mainComponent.backgroundComponent.isAligncenter = false end
if mainComponent.backgroundComponent then if mainComponent.backgroundComponent.colorHSVA then mainComponent.backgroundComponent.colorHSVA[1] = 1 end
if mainComponent.backgroundComponent.colorHSVA then mainComponent.backgroundComponent.colorHSVA[2] = 0 end
if mainComponent.backgroundComponent.colorHSVA then mainComponent.backgroundComponent.colorHSVA[3] = 1 end
if mainComponent.backgroundComponent.colorHSVA then mainComponent.backgroundComponent.colorHSVA[4] = 1 end
 end
if mainComponent.keyboardComponent then mainComponent.keyboardComponent.enabled = true end
if mainComponent.keyboardComponent then mainComponent.keyboardComponent.useRainbowColor = false end
if mainComponent.keyboardComponent then mainComponent.keyboardComponent.rainbowHueShift = 0.45 end
if mainComponent.keyboardComponent then if mainComponent.keyboardComponent.blackKeyColorHSV then mainComponent.keyboardComponent.blackKeyColorHSV[1] = 0 end
if mainComponent.keyboardComponent.blackKeyColorHSV then mainComponent.keyboardComponent.blackKeyColorHSV[2] = 0 end
if mainComponent.keyboardComponent.blackKeyColorHSV then mainComponent.keyboardComponent.blackKeyColorHSV[3] = 0.2 end
 end
if mainComponent.keyboardComponent then mainComponent.keyboardComponent.blackKeyAlpha = 0.9 end
if mainComponent.keyboardComponent then if mainComponent.keyboardComponent.whiteKeyColorHSV then mainComponent.keyboardComponent.whiteKeyColorHSV[1] = 0 end
if mainComponent.keyboardComponent.whiteKeyColorHSV then mainComponent.keyboardComponent.whiteKeyColorHSV[2] = 0 end
if mainComponent.keyboardComponent.whiteKeyColorHSV then mainComponent.keyboardComponent.whiteKeyColorHSV[3] = 0.9 end
 end
if mainComponent.keyboardComponent then mainComponent.keyboardComponent.whiteKeyAlpha = 0.9 end
if mainComponent.keyboardComponent then if mainComponent.keyboardComponent.brightKeyColorHSV then mainComponent.keyboardComponent.brightKeyColorHSV[1] = 0 end
if mainComponent.keyboardComponent.brightKeyColorHSV then mainComponent.keyboardComponent.brightKeyColorHSV[2] = 1 end
if mainComponent.keyboardComponent.brightKeyColorHSV then mainComponent.keyboardComponent.brightKeyColorHSV[3] = 1 end
 end
if mainComponent.keyboardComponent then mainComponent.keyboardComponent.brightKeyAlpha = 0.9 end
if mainComponent.notesComponent then mainComponent.notesComponent.enabled = true end
if mainComponent.notesComponent then mainComponent.notesComponent.noteScale = 1 end
if mainComponent.notesComponent then mainComponent.notesComponent.noteLengthOffset = 0 end
if mainComponent.notesComponent then mainComponent.notesComponent.colorAlpha = 0.8 end
if mainComponent.notesComponent then mainComponent.notesComponent.useRainbowColor = false end
if mainComponent.notesComponent then mainComponent.notesComponent.rainbowColorHueShift = 0.45 end
if mainComponent.notesComponent then mainComponent.notesComponent.rainbowColorSaturation = 0.8 end
if mainComponent.notesComponent then mainComponent.notesComponent.rainbowColorValue = 0.8 end
if mainComponent.notesComponent then mainComponent.notesComponent.brightNote = true end
if mainComponent.notesComponent then mainComponent.notesComponent.brightNoteSaturation = 0.6 end
if mainComponent.notesComponent then mainComponent.notesComponent.brightNodeValue = 0.9 end
if mainComponent.notesComponent then mainComponent.notesComponent.pitchBendSemitone = 12 end
if mainComponent.fallsComponent then mainComponent.fallsComponent.enabled = true end
if mainComponent.fallsComponent then mainComponent.fallsComponent.noteScale = 1 end
if mainComponent.fallsComponent then mainComponent.fallsComponent.noteLengthOffset = 0 end
if mainComponent.fallsComponent then mainComponent.fallsComponent.colorAlpha = 0.8 end
if mainComponent.fallsComponent then mainComponent.fallsComponent.useRainbowColor = false end
if mainComponent.fallsComponent then mainComponent.fallsComponent.rainbowColorHueShift = 0.45 end
if mainComponent.fallsComponent then mainComponent.fallsComponent.rainbowColorSaturation = 0.8 end
if mainComponent.fallsComponent then mainComponent.fallsComponent.rainbowColorValue = 0.8 end
if mainComponent.fallsComponent then mainComponent.fallsComponent.fadingOutSpeed = 1 end
if mainComponent.hitAnimationComponent then mainComponent.hitAnimationComponent.enabled = true end
if mainComponent.hitAnimationComponent then mainComponent.hitAnimationComponent.useRainbowColor = false end
if mainComponent.hitAnimationComponent then mainComponent.hitAnimationComponent.rainbowColorHueShift = 0.5 end
if mainComponent.hitAnimationComponent then mainComponent.hitAnimationComponent.rainbowColorSaturation = 0.8 end
if mainComponent.hitAnimationComponent then mainComponent.hitAnimationComponent.rainbowColorValue = 0.8 end
if mainComponent.hitAnimationComponent then mainComponent.hitAnimationComponent.colorAlpha = 0.8 end
if mainComponent.hitAnimationComponent then mainComponent.hitAnimationComponent.fadingOutSpeed = 1 end
if mainComponent.hitAnimationComponent then mainComponent.hitAnimationComponent.lengthScale = 1 end
if mainComponent.hitAnimationComponent then mainComponent.hitAnimationComponent.sizeScale = 1 end
if mainComponent.measuresComponent then mainComponent.measuresComponent.enabled = true end
if mainComponent.measuresComponent then if mainComponent.measuresComponent.measureColorHSV then mainComponent.measuresComponent.measureColorHSV[1] = 0 end
if mainComponent.measuresComponent.measureColorHSV then mainComponent.measuresComponent.measureColorHSV[2] = 0 end
if mainComponent.measuresComponent.measureColorHSV then mainComponent.measuresComponent.measureColorHSV[3] = 0 end
 end
if mainComponent.measuresComponent then mainComponent.measuresComponent.measureAlpha = 0.8 end
if mainComponent.measuresComponent then mainComponent.measuresComponent.measureConcentrationRate = 0.08 end
if mainComponent.measuresComponent then mainComponent.measuresComponent.fontSize = 54 end
if mainComponent.measuresComponent then if mainComponent.measuresComponent.measureTextOffsets then mainComponent.measuresComponent.measureTextOffsets[1] = 0.075 end
if mainComponent.measuresComponent.measureTextOffsets then mainComponent.measuresComponent.measureTextOffsets[2] = 0.025 end
 end
if mainComponent.measuresComponent then mainComponent.measuresComponent.measureTextScale = 0.05 end
if mainComponent.measuresComponent then if mainComponent.measuresComponent.measureTextColorHSVA then mainComponent.measuresComponent.measureTextColorHSVA[1] = 1 end
if mainComponent.measuresComponent.measureTextColorHSVA then mainComponent.measuresComponent.measureTextColorHSVA[2] = 0 end
if mainComponent.measuresComponent.measureTextColorHSVA then mainComponent.measuresComponent.measureTextColorHSVA[3] = 1 end
if mainComponent.measuresComponent.measureTextColorHSVA then mainComponent.measuresComponent.measureTextColorHSVA[4] = 0.8 end
 end
if mainComponent.measuresComponent then if mainComponent.measuresComponent.measureTextColorHSVA then mainComponent.measuresComponent.measureTextColorHSVA[1] = 1 end
if mainComponent.measuresComponent.measureTextColorHSVA then mainComponent.measuresComponent.measureTextColorHSVA[2] = 0 end
if mainComponent.measuresComponent.measureTextColorHSVA then mainComponent.measuresComponent.measureTextColorHSVA[3] = 1 end
if mainComponent.measuresComponent.measureTextColorHSVA then mainComponent.measuresComponent.measureTextColorHSVA[4] = 0.8 end
 end
if mainComponent.statisticComponent then mainComponent.statisticComponent.enabled = true end
if mainComponent.statisticComponent then if mainComponent.statisticComponent.colorHSVA then mainComponent.statisticComponent.colorHSVA[1] = 1 end
if mainComponent.statisticComponent.colorHSVA then mainComponent.statisticComponent.colorHSVA[2] = 0 end
if mainComponent.statisticComponent.colorHSVA then mainComponent.statisticComponent.colorHSVA[3] = 1 end
if mainComponent.statisticComponent.colorHSVA then mainComponent.statisticComponent.colorHSVA[4] = 1 end
 end
if mainComponent.statisticComponent then mainComponent.statisticComponent.textScale = 0.03 end
if mainComponent.statisticComponent then if mainComponent.statisticComponent.textOffsets then mainComponent.statisticComponent.textOffsets[1] = 0.005 end
if mainComponent.statisticComponent.textOffsets then mainComponent.statisticComponent.textOffsets[2] = 0.01 end
 end
if mainComponent.statisticComponent then mainComponent.statisticComponent.fontSize = 32 end
if player:getSong():getTracks()[1] then player:getSong():getTracks()[1].priority = 1 end
if player:getSong():getTracks()[1] then player:getSong():getTracks()[1].enabled = true end
if player:getSong():getTracks()[1] then if player:getSong():getTracks()[1].customColorHSV then player:getSong():getTracks()[1].customColorHSV[1] = nan end
if player:getSong():getTracks()[1].customColorHSV then player:getSong():getTracks()[1].customColorHSV[2] = 0.8 end
if player:getSong():getTracks()[1].customColorHSV then player:getSong():getTracks()[1].customColorHSV[3] = 0.8 end
 end
if player:getSong():getTracks()[1] then player:getSong():getTracks()[1].isDiamond = false end
